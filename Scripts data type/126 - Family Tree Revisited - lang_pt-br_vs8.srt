1
00:00:00,420 --> 00:00:05,210
Com a ajuda dos seletores jQuery, você pode selecionar elementos específicos do DOM.

2
00:00:05,210 --> 00:00:08,320
Mas, e se eu quisesse todos os filhos deste div?

3
00:00:08,320 --> 00:00:10,290
Como você os encontraria?

4
00:00:10,290 --> 00:00:13,790
Ou, se você selecionasse este div, mas

5
00:00:13,790 --> 00:00:16,620
quisesse inspecionar seu elemento pai, este div?

6
00:00:16,620 --> 00:00:18,900
Como você o encontraria?

7
00:00:18,900 --> 00:00:22,410
O jQuery nos dá métodos transversais DOM para nos movermos pela árvore do DOM.

8
00:00:22,410 --> 00:00:24,952
Começarei com parent.

9
00:00:24,952 --> 00:00:27,930
Se eu selecionar o nó com a ID Cameron,

10
00:00:27,930 --> 00:00:30,781
posso selecionar meu pai imediato chamando .parent.

11
00:00:30,781 --> 00:00:32,835
.parent sobe um nível no DOM, então

12
00:00:32,835 --> 00:00:36,960
nesse ponto, selecionei o elemento com a ID Mark Suzanne.

13
00:00:36,960 --> 00:00:40,450
Eu poderia usar .parents para selecionar meus pais, meus avós e

14
00:00:40,450 --> 00:00:42,010
meus bisavós.

15
00:00:42,010 --> 00:00:42,970
Também poderia filtrar por

16
00:00:42,970 --> 00:00:48,040
um parent específico passando outro seletor para o método parents.

17
00:00:48,040 --> 00:00:52,400
Digamos, por exemplo, que eu quisesse meus avós, JerryJudy, eu poderia passar

18
00:00:52,400 --> 00:00:56,780
JerryJudy com uma cerquilha para parents e ter somente este nó selecionado.

19
00:00:57,780 --> 00:01:02,170
É importante notar que parent avança apenas um nível na árvore.

20
00:01:02,170 --> 00:01:05,920
Se precisar subir mais de um nível, você precisará usar .parents; que

21
00:01:05,920 --> 00:01:07,980
vai até o topo da árvore do DOM.

22
00:01:09,110 --> 00:01:13,087
Eu também posso descer no DOM e selecionar meus filhos usando .children.

23
00:01:13,087 --> 00:01:17,770
.children cria uma coleção jQuery de todos os meus filhos diretos,

24
00:01:17,770 --> 00:01:19,810
o que significa que eles estão um nível abaixo no DOM.

25
00:01:20,920 --> 00:01:24,180
Mas se eu quisesse os filhos dos meus filhos, isto é, os filhos de Taylor e

26
00:01:24,180 --> 00:01:28,250
Grant, se eles existissem neste exemplo, eu teria que usar .find.

27
00:01:28,250 --> 00:01:30,110
.find desce mais de um nível no DOM.

28
00:01:31,180 --> 00:01:35,450
Semelhante a parent e parents, o jQuery fornece um método que

29
00:01:35,450 --> 00:01:40,300
percorre apenas um único nível na árvore, que é chamado .children.

30
00:01:40,300 --> 00:01:44,070
Se quiser ir mais além, há outro método chamado .find, que avança

31
00:01:44,070 --> 00:01:46,350
muitos níveis abaixo na árvore do DOM.

32
00:01:46,350 --> 00:01:48,490
Por fim, há .siblings.

33
00:01:48,490 --> 00:01:51,640
.siblings retorna uma coleção jQuery de todos os meus irmãos,

34
00:01:51,640 --> 00:01:53,380
o que significa que temos o mesmo pai.

35
00:01:53,380 --> 00:01:55,670
Nesse caso, Max e

36
00:01:55,670 --> 00:02:00,210
eu temos o mesmo pai, de modo que chamar .siblings retorna Max.

37
00:02:00,210 --> 00:02:03,180
E mais uma vez, posso passar um seletor para siblings se eu

38
00:02:03,180 --> 00:02:05,990
precisar ser mais específico na minha seleção.

39
00:02:05,990 --> 00:02:09,240
Agora, quero que você teste todos esses métodos transversais DOM em um teste.
