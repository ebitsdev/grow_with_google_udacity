1
00:00:00,240 --> 00:00:02,510
現実世界のイベントは、次のように定義できるかもしれません。

2
00:00:02,670 --> 00:00:05,570
関連した動作が実行されるための、ある条件を満たすこと。

3
00:00:05,920 --> 00:00:10,450
例えばバスケットで、ボールがゴールを通過すると

4
00:00:10,450 --> 00:00:12,940
チームに加点されます。

5
00:00:12,940 --> 00:00:16,110
ボールがゴールを通過すること。　これがイベントです。

6
00:00:16,110 --> 00:00:19,549
チームに加点すること。　これが関連して実行される動作です。

7
00:00:20,230 --> 00:00:22,520
ブラウザも同様で、様々なイベントが定義されています。

8
00:00:22,610 --> 00:00:25,860
マウスを操作する、リンクをクリックする、

9
00:00:25,860 --> 00:00:29,080
フォームで送信する、その他どんな動作も

10
00:00:29,080 --> 00:00:32,630
イベントが発生したのだと、ブラウザは解釈しています。

11
00:00:32,630 --> 00:00:35,660
ブラウザが、実際どのように動作しているか見てみましょう。

12
00:00:35,660 --> 00:00:37,902
Google Chromeは便利な機能を備えています。

13
00:00:37,902 --> 00:00:41,890
monitorEvents(); ファンクションを使うと、普段は隠されていて見えない

14
00:00:41,890 --> 00:00:44,100
イベントの詳細な動作を、覗き見ることができます。

15
00:00:44,930 --> 00:00:47,770
ページ上の動作を確認したいエレメントを引数として、

16
00:00:47,810 --> 00:00:50,080
このファンクションに渡します。

17
00:00:50,780 --> 00:00:55,440
このファンクションは、Chromeデベロッパーツールのコンソール内でのみ使えます。

18
00:00:55,440 --> 00:00:58,420
独自に作成したJavaScriptプログラム内で、使わないでください。

19
00:00:58,420 --> 00:01:00,950
おそらく、動作せずに参照エラーが発生するでしょう。

20
00:01:00,950 --> 00:01:04,599
注意書きは以上です。話を戻して、このファンクションの実行結果を見てみましょう。

21
00:01:05,660 --> 00:01:09,420
このページは、ご覧のとおり、単純なテキストフィールドを持っています。

22
00:01:09,870 --> 00:01:13,460
最初にjQueryを使って、このページのinputエレメントを全て取得します。

23
00:01:13,460 --> 00:01:15,980
そして、その中の最初の一つを選択します。これです。

24
00:01:15,980 --> 00:01:19,365
次に、monitorEvents(); ファンクションを呼び出して、

25
00:01:19,365 --> 00:01:22,380
inputエレメントを引数として渡します。

26
00:01:22,732 --> 00:01:26,350
monitorEvents(); ファンクションは受け取ったエレメントを監視して

27
00:01:26,350 --> 00:01:29,570
イベントが発生するとログに出力します。

28
00:01:29,970 --> 00:01:33,190
その結果、フィールドに操作を加えるとChromeがログを出力します。

29
00:01:33,340 --> 00:01:35,890
このように、monitorEvents(); ファンクションを使うと、

30
00:01:35,890 --> 00:01:38,640
ページ上の操作に対するブラウザの挙動を

31
00:01:38,640 --> 00:01:40,300
様々な方法で確認することができます。

